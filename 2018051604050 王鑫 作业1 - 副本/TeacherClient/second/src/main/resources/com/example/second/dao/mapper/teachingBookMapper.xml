<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.second.dao.TeachingBookDao">
    <resultMap id="BaseResultMap" type="com.example.second.entity.TeachingBook">
        <id column="uid" property="uid" jdbcType="BIGINT"/>
        <id column="isbn" property="isbn" jdbcType="VARCHAR"/>
        <result column="writer" property="writer" jdbcType="VARCHAR"/>
        <result column="version" property="version" jdbcType="VARCHAR"/>
        <result column="price" property="price" jdbcType="VARCHAR"/>
        <result column="reason" property="reason" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
        uid,name,isbn,writer,version,price,reason
    </sql>

    <select id="findAllTeachingBooks" resultType="com.example.second.entity.TeachingBook">
        select * from teachingBook
    </select>

    <select id="findTeachingBookByName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select * from teachingBook where name = #{name,jdbcType=VARCHAR}
    </select>

    <delete id="deleteTeachingBooksByIds">
        delete from teachingBook where uid in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getCountTeachingBooks" resultType="java.lang.Integer">
        select count(uid) as count from teachingBook
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from teachingBook
        where uid = #{uid,jdbcType=BIGINT}
    </select>
    <delete id="deleteTeachingBookById" parameterType="java.lang.Long">
        delete from teachingBook
        where uid = #{uid,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.example.second.entity.TeachingBook">
        insert into teachingBook (uid,name,isbn,writer,version,price,reason)
        values (#{uid,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{isbn,jdbcType=INTEGER},#{writer,jdbcType=INTEGER},#{version,jdbcType=INTEGER},#{price,jdbcType=INTEGER},#{reason,jdbcType=INTEGER}
        )
    </insert>
    <insert id="addTeachingBook" parameterType="com.example.second.entity.TeachingBook">
        insert into teachingBook
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                uid,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="isbn != null">
                isbn,
            </if>
            <if test="writer != null">
                writer,
            </if>
            <if test="version != null">
                version,
            </if>
            <if test="price != null">
                price,
            </if>
            <if test="reason != null">
                reason,
            </if>

        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                #{uid,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="isbn != null">
                #{isbn,jdbcType=VARCHAR},
            </if>
            <if test="writer != null">
                #{writer,jdbcType=INTEGER},
            </if>
            <if test="version != null">
                #{version,jdbcType=VARCHAR},
            </if>
            <if test="price != null">
                #{price,jdbcType=VARCHAR},
            </if>
            <if test="reason != null">
                #{reason,jdbcType=VARCHAR},
            </if>

        </trim>
    </insert>
    <update id="updateTeachingBook" parameterType="com.example.second.entity.TeachingBook">
        update teachingBook
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="isbn != null">
                isbn = #{isbn,jdbcType=VARCHAR},
            </if>
            <if test="writer != null">
                writer = #{writer,jdbcType=VARCHAR},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=VARCHAR},
            </if>
            <if test="price != null">
                price = #{price,jdbcType=VARCHAR},
            </if>
            <if test="reason != null">
                reason = #{reason,jdbcType=VARCHAR},
            </if>


        </set>
        where uid = #{uid,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.second.entity.TeachingBook">
        update teachingBook
        set name = #{name,jdbcType=VARCHAR},
            isbn = #{isbn,jdbcType=INTEGER},
            writer= #{writer,jdbcType=VARCHAR}
            version = #{version,jdbcType=VARCHAR}
            price = #{price,jdbcType=VARCHAR}
            reason = #{reason,jdbcType=VARCHAR}
        where uid = #{uid,jdbcType=BIGINT}
    </update>
</mapper>